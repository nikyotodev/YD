import { type NextRequest, NextResponse } from "next/server";
import { auth, db } from "@/lib/firebase-admin";
import { isAuthenticated, getUserIdFromRequest } from "@/lib/auth-middleware";
import {
  collection,
  doc,
  getDoc,
  getDocs,
  query,
  where,
  setDoc,
  deleteDoc,
  writeBatch,
} from "firebase/firestore";
import type { Collection } from "@/types/collections";
// GET /api/collections - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function GET(req: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const { authenticated, userId } = await isAuthenticated(req);
    if (!authenticated || !userId) {
      return NextResponse.json(
        {
          error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
          message: "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç",
          code: "auth_required",
        },
        { status: 401 },
      );
    }
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ Firestore
    const collectionsRef = db.collection("collections");
    const snapshot = await collectionsRef.where("userId", "==", userId).get();
    const collections: Collection[] = [];
    // –ó–∞–º–µ–Ω—è–µ–º forEach –Ω–∞ for...of –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    for (const doc of snapshot.docs) {
      collections.push({
        id: doc.id,
        ...doc.data(),
      } as Collection);
    }
    return NextResponse.json({ collections });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:", error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π" },
      { status: 500 },
    );
  }
}
// POST /api/collections - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
export async function POST(req: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const { authenticated, userId } = await isAuthenticated(req);
    if (!authenticated || !userId) {
      return NextResponse.json(
        {
          error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
          message: "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç",
          code: "auth_required",
        },
        { status: 401 },
      );
    }
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const data = await req.json();
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!data.name) {
      return NextResponse.json(
        { error: "–ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" },
        { status: 400 },
      );
    }
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    const collectionId = data.id || `collection_${Date.now()}`;
    const now = new Date();
    const collectionData = {
      id: collectionId,
      userId,
      name: data.name,
      description: data.description || "",
      emoji: data.emoji || "üìö",
      color: data.color || "blue",
      createdAt: now,
      updatedAt: now,
      wordsCount: 0,
      progress: {
        total: 0,
        new: 0,
        learning: 0,
        familiar: 0,
        mastered: 0,
        percentage: 0,
        streakDays: 0,
      },
    };
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
    await db.collection("collections").doc(collectionId).set(collectionData);
    return NextResponse.json({
      success: true,
      collection: collectionData,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏" },
      { status: 500 },
    );
  }
}
// DELETE /api/collections?id={collectionId} - —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
export async function DELETE(req: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const { authenticated, userId } = await isAuthenticated(req);
    if (!authenticated || !userId) {
      return NextResponse.json(
        {
          error: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
          message: "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç",
          code: "auth_required",
        },
        { status: 401 },
      );
    }
    // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const { searchParams } = new URL(req.url);
    const collectionId = searchParams.get("id");
    if (!collectionId) {
      return NextResponse.json(
        { error: "ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω" },
        { status: 400 },
      );
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const collectionRef = db.collection("collections").doc(collectionId);
    const collection = await collectionRef.get();
    if (!collection.exists) {
      return NextResponse.json(
        { error: "–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" },
        { status: 404 },
      );
    }
    if (collection.data()?.userId !== userId) {
      return NextResponse.json(
        { error: "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏" },
        { status: 403 },
      );
    }
    // –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const wordsRef = db.collection("words");
    const wordsSnapshot = await wordsRef
      .where("collectionId", "==", collectionId)
      .get();
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ª–æ–≤
    const batch = db.batch();
    // –ó–∞–º–µ–Ω—è–µ–º forEach –Ω–∞ for...of –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    for (const doc of wordsSnapshot.docs) {
      batch.delete(doc.ref);
    }
    // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–ª–ª–µ–∫—Ü–∏—é
    batch.delete(collectionRef);
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    await batch.commit();
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏" },
      { status: 500 },
    );
  }
}
