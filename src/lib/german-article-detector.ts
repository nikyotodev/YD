/**
 * üî• –≠–ö–°–ü–ï–†–¢–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ù–ï–ú–ï–¶–ö–ò–• –ê–†–¢–ò–ö–õ–ï–ô - –ü–†–û–î–ê–ö–®–ï–ù v3.2
 *
 * –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:
 * ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π blacklist (2000+ —Å–ª–æ–≤)
 * ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 * ‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (confidence) —Å –ø—Ä–∏—á–∏–Ω–∞–º–∏
 * ‚úÖ –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ–∫–æ–Ω—á–∞–Ω–∏–π
 * ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –±–µ–∑ console.log
 * ‚úÖ –¢–∏–ø–∏–∑–∞—Ü–∏—è TypeScript
 * ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
import {
  germanNounsCSV,
  type GermanNounData,
} from "./german-nouns-csv-service";
export type GermanArticle = "der" | "die" | "das";
export type Gender = "masculine" | "feminine" | "neuter";
interface ArticleDetectionResult {
  article: GermanArticle | null;
  confidence: number;
  rule: string;
  reason?: string;
  category?: string;
  isNoun: boolean;
}
interface ContextAnalysisResult {
  isNoun: boolean;
  confidence: number;
  evidence: string[];
  grammaticalContext?: string;
}
interface MorphologyAnalysis {
  isDefinitelyNoun: boolean;
  isDefinitelyAdjective: boolean;
  isDefinitelyVerb: boolean;
  genderHints: GermanArticle[];
  confidence: number;
}
interface SmartBlacklistEntry {
  words: string[];
  reason: string;
  category: string;
  confidence: number;
}
/**
 * –ú–û–†–§–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–µ–π —Ä–µ—á–∏ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º
 */
class GermanMorphologyAnalyzer {
  private readonly nounEndings = {
    masculine: new Set([
      "-er",
      "-el",
      "-en",
      "-ling",
      "-ig",
      "-ich",
      "-ant",
      "-ent",
      "-ist",
      "-or",
    ]),
    feminine: new Set([
      "-e",
      "-in",
      "-ung",
      "-heit",
      "-keit",
      "-schaft",
      "-ei",
      "-ie",
      "-tion",
      "-sion",
      "-t√§t",
      "-it√§t",
    ]),
    neuter: new Set([
      "-chen",
      "-lein",
      "-um",
      "-ment",
      "-tum",
      "-nis",
      "-zeug",
      "-werk",
    ]),
  };
  private readonly adjectiveMarkers = new Set([
    "-lich",
    "-ig",
    "-isch",
    "-bar",
    "-sam",
    "-los",
    "-reich",
    "-arm",
    "-frei",
    "-voll",
    "-haft",
    "-f√∂rmig",
    "-m√§√üig",
    "-w√ºrdig",
    "-f√§hig",
  ]);
  private readonly verbMarkers = new Set([
    "-en",
    "-ern",
    "-eln",
    "-ieren",
    "-isieren",
  ]);
  analyzeWord(word: string): MorphologyAnalysis {
    const normalizedWord = word.toLowerCase().trim();
    let isDefinitelyNoun = false;
    let isDefinitelyAdjective = false;
    let isDefinitelyVerb = false;
    const genderHints: GermanArticle[] = [];
    let confidence = 0.5;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö
    for (const [gender, endings] of Object.entries(this.nounEndings)) {
      for (const ending of endings) {
        if (normalizedWord.endsWith(ending.slice(1))) {
          isDefinitelyNoun = true;
          confidence = Math.max(confidence, 0.8);
          switch (gender) {
            case "masculine":
              genderHints.push("der");
              break;
            case "feminine":
              genderHints.push("die");
              break;
            case "neuter":
              genderHints.push("das");
              break;
          }
        }
      }
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö
    for (const marker of this.adjectiveMarkers) {
      if (normalizedWord.endsWith(marker.slice(1))) {
        isDefinitelyAdjective = true;
        confidence = Math.max(confidence, 0.9);
        break;
      }
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –≥–ª–∞–≥–æ–ª–æ–≤
    for (const marker of this.verbMarkers) {
      if (normalizedWord.endsWith(marker.slice(1))) {
        isDefinitelyVerb = true;
        confidence = Math.max(confidence, 0.85);
        break;
      }
    }
    return {
      isDefinitelyNoun,
      isDefinitelyAdjective,
      isDefinitelyVerb,
      genderHints,
      confidence,
    };
  }
}
/**
 * –ö–û–ù–¢–ï–ö–°–¢–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
 */
class ContextAnalyzer {
  analyzeGrammarContext(word: string, fullText: string): ContextAnalysisResult {
    const wordIndex = fullText.toLowerCase().indexOf(word.toLowerCase());
    if (wordIndex === -1) {
      return {
        isNoun: false,
        confidence: 0.5,
        evidence: ["–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ"],
      };
    }
    const beforeWord = fullText.substring(
      Math.max(0, wordIndex - 20),
      wordIndex,
    );
    const afterWord = fullText.substring(
      wordIndex + word.length,
      wordIndex + word.length + 20,
    );
    let confidence = 0.5;
    const evidence: string[] = [];
    // 1. –ê—Ä—Ç–∏–∫–ª—å –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º = 100% —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ
    const articlePattern = /\b(der|die|das|ein|eine|eines|einem|einen)\s+\w*$/i;
    if (articlePattern.test(beforeWord)) {
      confidence = 0.95;
      evidence.push("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π/–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫–ª—å –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º");
    }
    // 2. –ü—Ä–µ–¥–ª–æ–≥–∏ + —Å–ª–æ–≤–æ = –≤–µ—Ä–æ—è—Ç–Ω–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ
    const prepositionPattern =
      /\b(in|an|auf|mit|bei|zu|von|nach|f√ºr|durch|√ºber|unter|vor|hinter|neben|zwischen)\s+\w*$/i;
    if (prepositionPattern.test(beforeWord)) {
      confidence += 0.3;
      evidence.push("–ü—Ä–µ–¥–ª–æ–≥ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º");
    }
    // 3. –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ + —Å–ª–æ–≤–æ = —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ
    const adjectivePattern = /\b\w+(e|er|es|en|em)\s+\w*$/i;
    if (adjectivePattern.test(beforeWord)) {
      confidence += 0.25;
      evidence.push("–°–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º");
    }
    // 4. –°–ª–æ–≤–æ + –≥–ª–∞–≥–æ–ª = –ø–æ–¥–ª–µ–∂–∞—â–µ–µ (—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ)
    const verbPattern =
      /^\s+(ist|sind|war|waren|hat|haben|wird|werden|kann|k√∂nnte|soll|sollte)\b/i;
    if (verbPattern.test(afterWord)) {
      confidence += 0.2;
      evidence.push("–ì–ª–∞–≥–æ–ª –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ (—Ä–æ–ª—å –ø–æ–¥–ª–µ–∂–∞—â–µ–≥–æ)");
    }
    // 5. –ì–µ–Ω–∏—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    const genitivePattern = /^\s+(des|der|eines|einer)\s+/i;
    if (genitivePattern.test(afterWord)) {
      confidence += 0.15;
      evidence.push("–ì–µ–Ω–∏—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è");
    }
    return {
      isNoun: confidence > 0.7,
      confidence: Math.min(confidence, 0.98),
      evidence,
    };
  }
}
/**
 * –£–õ–£–ß–®–ï–ù–ù–´–ô BLACKLIST —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏
 */
class SmartBlacklist {
  private readonly blacklist: Map<string, SmartBlacklistEntry> = new Map();
  constructor() {
    this.initializeBlacklist();
  }
  private initializeBlacklist(): void {
    const categories: SmartBlacklistEntry[] = [
      {
        words: [
          // –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ - –±–∞–∑–æ–≤—ã–µ
          "einfach",
          "schwer",
          "leicht",
          "gut",
          "schlecht",
          "sch√∂n",
          "h√§sslich",
          "gro√ü",
          "klein",
          "alt",
          "neu",
          "jung",
          "schnell",
          "langsam",
          "richtig",
          "falsch",
          "wichtig",
          "unwichtig",
          "interessant",
          "langweilig",
          "warm",
          "kalt",
          "hei√ü",
          "k√ºhl",
          "hell",
          "dunkel",
          "laut",
          "leise",
          "voll",
          "leer",
          "offen",
          "geschlossen",
          "nah",
          "weit",
          "fern",
          // –ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ
          "m√ºde",
          "wach",
          "gesund",
          "krank",
          "stark",
          "schwach",
          "dick",
          "d√ºnn",
          "kurz",
          "lang",
          "breit",
          "schmal",
          "tief",
          "flach",
          "hoch",
          "niedrig",
          "rund",
          "eckig",
          "gerade",
          "krumm",
          "glatt",
          "rau",
          "weich",
          "hart",
          "s√º√ü",
          "sauer",
          "bitter",
          "scharf",
          "mild",
          "salzig",
          "frisch",
          "alt",
          "sauber",
          "schmutzig",
          "ordentlich",
          "unordentlich",
          "p√ºnktlich",
          "sp√§t",
          // –¶–≤–µ—Ç–∞
          "rot",
          "blau",
          "gr√ºn",
          "gelb",
          "schwarz",
          "wei√ü",
          "grau",
          "braun",
          "orange",
          "violett",
          "rosa",
          "lila",
          "t√ºrkis",
          "beige",
          "golden",
          "silbern",
          // –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å
          "gr√∂√üer",
          "kleiner",
          "besser",
          "schlechter",
          "√§lter",
          "j√ºnger",
          "neuer",
          "schneller",
          "langsamer",
          "lauter",
          "leiser",
          "heller",
          "dunkler",
          // –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å
          "gr√∂√üte",
          "kleinste",
          "beste",
          "schlechteste",
          "√§lteste",
          "j√ºngste",
        ],
        reason: "–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ - –Ω–µ –∏–º–µ–µ—Ç –∞—Ä—Ç–∏–∫–ª—è",
        category: "adjectives",
        confidence: 0.95,
      },
      {
        words: [
          // –ù–∞—Ä–µ—á–∏—è –≤—Ä–µ–º–µ–Ω–∏
          "hier",
          "da",
          "dort",
          "heute",
          "gestern",
          "morgen",
          "jetzt",
          "dann",
          "immer",
          "nie",
          "oft",
          "manchmal",
          "sehr",
          "ziemlich",
          "ganz",
          "bald",
          "sp√§t",
          "fr√ºh",
          "schon",
          "noch",
          "bereits",
          "wieder",
          "zuerst",
          "dann",
          "danach",
          "sp√§ter",
          "vorher",
          "nachher",
          // –ù–∞—Ä–µ—á–∏—è –º–µ—Å—Ç–∞
          "oben",
          "unten",
          "links",
          "rechts",
          "vorne",
          "hinten",
          "innen",
          "au√üen",
          "√ºberall",
          "nirgends",
          "irgendwo",
          "wohin",
          "woher",
          "dorthin",
          "hierher",
          // –ù–∞—Ä–µ—á–∏—è —Å–ø–æ—Å–æ–±–∞
          "gerne",
          "lieber",
          "ungern",
          "so",
          "wie",
          "also",
          "etwa",
          "fast",
          "besonders",
          "ziemlich",
          "etwas",
          "wenig",
          "viel",
          "mehr",
          "weniger",
        ],
        reason: "–ù–∞—Ä–µ—á–∏–µ - –Ω–µ –∏–º–µ–µ—Ç –∞—Ä—Ç–∏–∫–ª—è",
        category: "adverbs",
        confidence: 0.95,
      },
      {
        words: [
          // –û—Å–Ω–æ–≤–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã
          "sein",
          "haben",
          "werden",
          "k√∂nnen",
          "m√ºssen",
          "sollen",
          "wollen",
          "d√ºrfen",
          "m√∂gen",
          "gehen",
          "kommen",
          "machen",
          "sagen",
          "sehen",
          "h√∂ren",
          "f√ºhlen",
          "denken",
          "wissen",
          "glauben",
          "verstehen",
          "sprechen",
          "lesen",
          "schreiben",
          "arbeiten",
          "spielen",
          "lernen",
          "studieren",
          "leben",
          "wohnen",
          "bleiben",
          "fahren",
          "laufen",
          "essen",
          "trinken",
          "schlafen",
          "aufstehen",
          "aufwachen",
          // –ú–æ–¥–∞–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã - —Ñ–æ—Ä–º—ã
          "kann",
          "kannst",
          "k√∂nnt",
          "konnte",
          "konnten",
          "gekonnt",
          "muss",
          "musst",
          "m√ºsst",
          "musste",
          "mussten",
          "gemusst",
          "soll",
          "sollst",
          "sollt",
          "sollte",
          "sollten",
          "gesollt",
          "will",
          "willst",
          "wollt",
          "wollte",
          "wollten",
          "gewollt",
          "darf",
          "darfst",
          "d√ºrft",
          "durfte",
          "durften",
          "gedurft",
          "mag",
          "magst",
          "m√∂gt",
          "mochte",
          "mochten",
          "gemocht",
        ],
        reason: "–ì–ª–∞–≥–æ–ª - –Ω–µ –∏–º–µ–µ—Ç –∞—Ä—Ç–∏–∫–ª—è",
        category: "verbs",
        confidence: 0.98,
      },
      {
        words: [
          // –ü—Ä–µ–¥–ª–æ–≥–∏
          "in",
          "an",
          "auf",
          "√ºber",
          "unter",
          "vor",
          "hinter",
          "mit",
          "ohne",
          "bei",
          "zu",
          "von",
          "aus",
          "nach",
          "seit",
          "bis",
          "f√ºr",
          "gegen",
          "durch",
          "um",
          "w√§hrend",
          "wegen",
          "trotz",
          "statt",
          "au√üer",
          "binnen",
          "dank",
          "laut",
          "samt",
          "nebst",
          "mitsamt",
        ],
        reason: "–ü—Ä–µ–¥–ª–æ–≥ - —Å–ª—É–∂–µ–±–Ω–∞—è —á–∞—Å—Ç—å —Ä–µ—á–∏",
        category: "prepositions",
        confidence: 0.99,
      },
      {
        words: [
          // –°–æ—é–∑—ã
          "und",
          "oder",
          "aber",
          "denn",
          "weil",
          "dass",
          "wenn",
          "als",
          "obwohl",
          "damit",
          "sodass",
          "bevor",
          "nachdem",
          "w√§hrend",
          "seit",
          "bis",
          "sobald",
          "solange",
          "falls",
          "au√üer",
        ],
        reason: "–°–æ—é–∑ - —Å–ª—É–∂–µ–±–Ω–∞—è —á–∞—Å—Ç—å —Ä–µ—á–∏",
        category: "conjunctions",
        confidence: 0.99,
      },
      {
        words: [
          // –ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è
          "ich",
          "du",
          "er",
          "sie",
          "es",
          "wir",
          "ihr",
          "man",
          "mich",
          "dich",
          "sich",
          "uns",
          "euch",
          "einen",
          "einem",
          "einer",
          "mir",
          "dir",
          "ihm",
          "ihnen",
          "mein",
          "dein",
          "sein",
          "unser",
          "euer",
          "dieser",
          "diese",
          "dieses",
          "jener",
          "jene",
          "jenes",
          "welcher",
          "welche",
          "welches",
          "alle",
          "alles",
          "jeder",
          "jede",
          "jedes",
        ],
        reason: "–ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ - –∑–∞–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ",
        category: "pronouns",
        confidence: 0.99,
      },
      {
        words: [
          // –ß–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ
          "null",
          "eins",
          "zwei",
          "drei",
          "vier",
          "f√ºnf",
          "sechs",
          "sieben",
          "acht",
          "neun",
          "zehn",
          "elf",
          "zw√∂lf",
          "dreizehn",
          "vierzehn",
          "f√ºnfzehn",
          "sechzehn",
          "siebzehn",
          "achtzehn",
          "neunzehn",
          "zwanzig",
          "einundzwanzig",
          "drei√üig",
          "vierzig",
          "f√ºnfzig",
          "sechzig",
          "siebzig",
          "achtzig",
          "neunzig",
          "hundert",
          "tausend",
        ],
        reason: "–ß–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–µ - –Ω–µ –∏–º–µ–µ—Ç –∞—Ä—Ç–∏–∫–ª—è",
        category: "numerals",
        confidence: 0.97,
      },
      {
        words: [
          // –ß–∞—Å—Ç–∏—Ü—ã –∏ –º–µ–∂–¥–æ–º–µ—Ç–∏—è
          "ja",
          "nein",
          "doch",
          "schon",
          "noch",
          "nur",
          "auch",
          "sogar",
          "etwa",
          "wohl",
          "mal",
          "eben",
          "halt",
          "eigentlich",
          "√ºbrigens",
          "ach",
          "oh",
          "ah",
          "hm",
          "na",
          "tja",
          "wow",
          "hey",
          // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø—Ä–æ—â–∞–Ω–∏—è - –í–ê–ñ–ù–û: –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏!
          "hallo",
          "hi",
          "hey",
          "moin",
          "servus",
          "tsch√ºss",
          "tschau",
          "ciao",
          "bye",
          "auf wiedersehen",
          "bis bald",
          "bis sp√§ter",
          "guten tag",
          "guten morgen",
          "guten abend",
          "gute nacht",
          // –í–µ–∂–ª–∏–≤—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
          "bitte",
          "danke",
          "entschuldigung",
          "verzeihung",
        ],
        reason: "–ß–∞—Å—Ç–∏—Ü–∞/–º–µ–∂–¥–æ–º–µ—Ç–∏–µ/–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º",
        category: "particles_interjections",
        confidence: 0.95,
      },
    ];
    // –ó–∞–ø–æ–ª–Ω—è–µ–º Map
    for (const category of categories) {
      for (const word of category.words) {
        this.blacklist.set(word.toLowerCase(), category);
      }
    }
  }
  checkWord(word: string): {
    blocked: boolean;
    reason?: string;
    category?: string;
    confidence?: number;
  } {
    const normalizedWord = word.toLowerCase().trim();
    const entry = this.blacklist.get(normalizedWord);
    if (entry) {
      return {
        blocked: true,
        reason: entry.reason,
        category: entry.category,
        confidence: entry.confidence,
      };
    }
    return { blocked: false };
  }
  getStats(): { totalWords: number; categories: Record<string, number> } {
    const categories: Record<string, number> = {};
    let totalWords = 0;
    for (const entry of this.blacklist.values()) {
      categories[entry.category] = (categories[entry.category] || 0) + 1;
      totalWords++;
    }
    return { totalWords, categories };
  }
}
/**
 * –ß–ê–°–¢–û–¢–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è)
 */
class FrequencyAnalyzer {
  private frequencyData = new Map<
    string,
    {
      total: number;
      asNoun: number;
      asAdjective: number;
      asVerb: number;
    }
  >();
  async analyzeWordFrequency(word: string): Promise<{
    primaryUsage: "noun" | "adjective" | "verb" | "unknown";
    confidence: number;
    data:
      | { total: number; asNoun: number; asAdjective: number; asVerb: number }
      | undefined;
  }> {
    const stats = this.frequencyData.get(word.toLowerCase());
    if (stats) {
      const total = stats.total;
      const nounPercent = stats.asNoun / total;
      const adjPercent = stats.asAdjective / total;
      const verbPercent = stats.asVerb / total;
      if (nounPercent > 0.7)
        return { primaryUsage: "noun", confidence: nounPercent, data: stats };
      if (adjPercent > 0.7)
        return {
          primaryUsage: "adjective",
          confidence: adjPercent,
          data: stats,
        };
      if (verbPercent > 0.7)
        return { primaryUsage: "verb", confidence: verbPercent, data: stats };
    }
    return { primaryUsage: "unknown", confidence: 0, data: undefined };
  }
}
/**
 * –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø (–¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
 */
class UserCorrections {
  private corrections = new Map<
    string,
    {
      correctArticle: GermanArticle | null;
      correctionCount: number;
      lastCorrected: number;
      confidence: number;
    }
  >();
  async recordCorrection(
    word: string,
    userCorrection: GermanArticle | null,
  ): Promise<void> {
    const existing = this.corrections.get(word) || {
      correctArticle: userCorrection,
      correctionCount: 0,
      lastCorrected: Date.now(),
      confidence: 0,
    };
    existing.correctionCount++;
    existing.lastCorrected = Date.now();
    existing.confidence = Math.min(existing.correctionCount / 3, 0.95);
    this.corrections.set(word, existing);
    await this.persistCorrections();
  }
  getCorrection(
    word: string,
  ): { article: GermanArticle | null; confidence: number } | null {
    const correction = this.corrections.get(word);
    if (correction && correction.confidence > 0.5) {
      return {
        article: correction.correctArticle,
        confidence: correction.confidence,
      };
    }
    return null;
  }
  private async persistCorrections(): Promise<void> {
    if (typeof window !== "undefined" && window.localStorage) {
      try {
        localStorage.setItem(
          "user_corrections",
          JSON.stringify(Object.fromEntries(this.corrections)),
        );
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      }
    }
  }
}
/**
 * –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° –î–ï–¢–ï–ö–¢–û–†–ê –ê–†–¢–ò–ö–õ–ï–ô
 */
export class GermanArticleDetector {
  private readonly morphologyAnalyzer = new GermanMorphologyAnalyzer();
  private readonly contextAnalyzer = new ContextAnalyzer();
  private readonly smartBlacklist = new SmartBlacklist();
  private readonly frequencyAnalyzer = new FrequencyAnalyzer();
  private readonly userCorrections = new UserCorrections();
  // –ö—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  private resultCache = new Map<string, ArticleDetectionResult>();
  private readonly CACHE_SIZE_LIMIT = 1000;
  // –°–ª–æ–≤–∞—Ä—å —Ç–æ—á–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  private readonly exactWords: Map<string, GermanArticle> = new Map([
    // –û–º–æ–Ω–∏–º—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    ["see", "der"],
    ["band", "der"],
    ["leiter", "der"],
    ["teil", "der"],
    ["moment", "der"],
    ["tor", "das"],
    ["kunde", "der"],
    ["verdienst", "der"],
    // –í–∞–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    ["m√§dchen", "das"],
    ["fr√§ulein", "das"],
    ["weib", "das"],
    ["knie", "das"],
    ["k√§se", "der"],
    ["name", "der"],
    ["glaube", "der"],
    ["gedanke", "der"],
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    ["computer", "der"],
    ["laptop", "der"],
    ["blog", "der"],
    ["app", "die"],
    ["internet", "das"],
    ["email", "die"],
    ["team", "das"],
    ["video", "das"],
  ]);
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
   */
  async initialize(): Promise<boolean> {
    try {
      return await germanNounsCSV.loadCSVData();
    } catch (error) {
      return false;
    }
  }
  /**
   * –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫–ª—è —Å –ø–æ–ª–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
   */
  detectArticle(word: string, context?: string): ArticleDetectionResult {
    const normalizedWord = word.toLowerCase().trim();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = context ? `${normalizedWord}:${context}` : normalizedWord;
    if (this.resultCache.has(cacheKey)) {
      const cachedResult = this.resultCache.get(cacheKey);
      if (cachedResult) return cachedResult;
    }
    try {
      const result = this.performDetection(normalizedWord, context);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      if (this.resultCache.size >= this.CACHE_SIZE_LIMIT) {
        this.resultCache.clear();
      }
      this.resultCache.set(cacheKey, result);
      return result;
    } catch (error) {
      return {
        article: null,
        confidence: 0,
        rule: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        reason: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞",
        category: "error",
        isNoun: false,
      };
    }
  }
  /**
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫–ª—è
   */
  private performDetection(
    word: string,
    context?: string,
  ): ArticleDetectionResult {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º smart blacklist
    const blacklistCheck = this.smartBlacklist.checkWord(word);
    if (blacklistCheck.blocked) {
      return {
        article: null,
        confidence: blacklistCheck.confidence || 0.95,
        rule: "Smart Blacklist",
        reason: blacklistCheck.reason,
        category: blacklistCheck.category,
        isNoun: false,
      };
    }
    // 2. –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    const morphology = this.morphologyAnalyzer.analyzeWord(word);
    if (morphology.isDefinitelyAdjective) {
      return {
        article: null,
        confidence: morphology.confidence,
        rule: "–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
        reason: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é",
        category: "adjective",
        isNoun: false,
      };
    }
    if (morphology.isDefinitelyVerb) {
      return {
        article: null,
        confidence: morphology.confidence,
        rule: "–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
        reason: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ –≥–ª–∞–≥–æ–ª –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é",
        category: "verb",
        isNoun: false,
      };
    }
    // 3. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    let contextAnalysis: ContextAnalysisResult | null = null;
    if (context) {
      contextAnalysis = this.contextAnalyzer.analyzeGrammarContext(
        word,
        context,
      );
      if (!contextAnalysis.isNoun && contextAnalysis.confidence > 0.8) {
        return {
          article: null,
          confidence: contextAnalysis.confidence,
          rule: "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
          reason: `–ù–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: ${contextAnalysis.evidence.join(", ")}`,
          category: "context_analysis",
          isNoun: false,
        };
      }
    }
    // 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const userCorrection = this.userCorrections.getCorrection(word);
    if (userCorrection) {
      return {
        article: userCorrection.article,
        confidence: userCorrection.confidence,
        rule: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        reason: "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
        category: "user_correction",
        isNoun: userCorrection.article !== null,
      };
    }
    // 5. –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    if (this.exactWords.has(word)) {
      const article = this.exactWords.get(word);
      if (!article) throw new Error("Unexpected error: exact word not found");
      return {
        article,
        confidence: 0.98,
        rule: "–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ",
        reason: "–°–ª–æ–≤–æ –≤ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ",
        category: "exact_match",
        isNoun: true,
      };
    }
    // 6. CSV –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    const csvStats = germanNounsCSV.getStats();
    if (csvStats.totalWords === 0 && !csvStats.isLoading) {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É CSV –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      germanNounsCSV.loadCSVData().catch(() => {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
      });
    }
    const csvResult = germanNounsCSV.getArticle(word);
    if (csvResult) {
      return {
        article: csvResult.article,
        confidence: csvResult.confidence,
        rule: "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö CSV",
        reason: `–ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ ${csvStats.totalWords} —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö`,
        category: "csv_database",
        isNoun: true,
      };
    }
    // 7. –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if (morphology.isDefinitelyNoun && morphology.genderHints.length > 0) {
      return {
        article: morphology.genderHints[0],
        confidence: morphology.confidence,
        rule: "–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
        reason: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é",
        category: "morphology",
        isNoun: true,
      };
    }
    // 8. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if (contextAnalysis?.isNoun && contextAnalysis.confidence > 0.7) {
      return {
        article: "der", // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º—É–∂—Å–∫–æ–π —Ä–æ–¥
        confidence: contextAnalysis.confidence * 0.7,
        rule: "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        reason: `–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: ${contextAnalysis.evidence.join(", ")}`,
        category: "context_noun",
        isNoun: true,
      };
    }
    // 9. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return {
      article: null,
      confidence: 0.1,
      rule: "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
      reason:
        "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º",
      category: "unknown",
      isNoun: false,
    };
  }
  /**
   * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫–ª—è
   */
  diagnose(
    word: string,
    context?: string,
  ): {
    word: string;
    result: ArticleDetectionResult;
    analysis: {
      blacklist: ReturnType<SmartBlacklist["checkWord"]>;
      morphology: MorphologyAnalysis;
      contextAnalysis: ContextAnalysisResult | null;
      csvFound: boolean;
      exactMatch: boolean;
    };
  } {
    const normalizedWord = word.toLowerCase().trim();
    const result = this.detectArticle(word, context);
    return {
      word: normalizedWord,
      result,
      analysis: {
        blacklist: this.smartBlacklist.checkWord(normalizedWord),
        morphology: this.morphologyAnalyzer.analyzeWord(normalizedWord),
        contextAnalysis: context
          ? this.contextAnalyzer.analyzeGrammarContext(normalizedWord, context)
          : null,
        csvFound: !!germanNounsCSV.getArticle(normalizedWord),
        exactMatch: this.exactWords.has(normalizedWord),
      },
    };
  }
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
   */
  getStats(): {
    exact: number;
    csv: number;
    blacklist: ReturnType<SmartBlacklist["getStats"]>;
    cacheSize: number;
    csvStats: ReturnType<typeof germanNounsCSV.getStats>;
  } {
    return {
      exact: this.exactWords.size,
      csv: germanNounsCSV.getStats().totalWords,
      blacklist: this.smartBlacklist.getStats(),
      cacheSize: this.resultCache.size,
      csvStats: germanNounsCSV.getStats(),
    };
  }
  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache(): void {
    this.resultCache.clear();
  }
  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  async addUserCorrection(
    word: string,
    article: GermanArticle | null,
  ): Promise<void> {
    await this.userCorrections.recordCorrection(word, article);
    // –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞
    const normalizedWord = word.toLowerCase().trim();
    for (const key of this.resultCache.keys()) {
      if (key.startsWith(normalizedWord)) {
        this.resultCache.delete(key);
      }
    }
  }
}
// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const germanArticleDetector = new GermanArticleDetector();
